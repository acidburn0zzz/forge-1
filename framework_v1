
REQUIRMENTS/DESIGN
-Design proposition:
	-enviroment going to be script without interactive parameters, it will be using only program options and arguments.
	-enviroment will be divided on two parts:
		1. server - running in background on machine with DHCPv6 server installed, it will be responsible for delivering DHCP version server and starting it with particular config. In first version that will be only for ISC DHCP server.
		2. client - running on other machine, responsible for running/reporting/adding tests, that CAN'T be designing for only ISC DHCP. It should work for other versions.
	-It's going to be extensible (in future tests not only for DHCPv6?)

-Test schema:
	-id 
	-name (solicit message)
	-type (DHCPv6)
	-short description (discating solicit without DUID)
	-detailed description (Server MUST discard any Solicit messages that not include a Client Identifier option...)
	-rfc (3315) 
	-specific section of rfc (15.2)
	-server config changes/ requirements of co-operational mode
	-expected outcome/pass criteria (no advertise)
	test:
		-send solicit without DUID
		-wait for advertive
		-resend solicit (conditions: IRT, MRT, MRC, MRD)
			if no advertise an the end: TEST PASSED
	all fields of test are divided for basic and extendet, for test reporting


-Running tests:
	starting program means automaticly running tests(exeption: adding new test(?)). Choosing tests and declaring options will be performed by program options and arguments
	also I'm thinking for users config for example:
		./tester.py -set of option --SAVE my_set_1
	then we can start program with:
		./tester.py my_set_1
	choosing tests:
		by ID - single ID or set (10-30)
		by rfc
		by rfc section
		by name
		by type
	reporting:
		detailed
		basic
	mode:
		co-operational with server installed 
		stand-alone without possibility of managing DHCPv6 server


-Raporting:
	at the begginig program will make directory named as tested DHCP sever version(each version have it's own direcotry)
		first test of all in directory will generate:
			copmare.html <- table with name, specific section of rfc, test result
			testsX.html <- information about set of tests
			if option detailed == 0 
				generate full test raport only for FAILED tests
			if option detailed == 1
				generate full test raport for all tests

		next test:
			add to compare.html results of this set of tests	
			create:
			testsX.html <- information about set of tests
			if option detailed == 0 
				generate full test raport only for FAILED tests
			if option detailed == 1
				generate full test raport for all tests
	detailed tests outcome each in diffrent file
	aditional info: running time,date,OS,sever version (not only as directory)

-Adding new tests:
	diffrent ways:
		1. manually write full test 
		2. generation test file with blank space, just fill it and run.
		3. some file automatic file parser (? - no details for now) 
	program schould have some 'self-test' for new test validation, last think we want is running broken test

