  Forge info
 ------------

Forge is a temporary name for our automated DHCP validation framework.
It uses Scapy and Lettuce to run various DHCP tests. It is in very
early stages of development (think "pre-prototype").


 Dependencies Installation
---------------------------

Forge requires python 2.x, scapy and lettuce. The following steps are
necessary on Debian 6.0. If you use different operating system, your
steps may be slightly different:

(Note: may have to edit /etc/apt/sources.list and place new mirror entry:
   deb http://mirror.cse.iitk.ac.in/debian/ testing main contrib
...then run "sudo apt-get update")

# This will install pip (python package installer)
sudo apt-get install python-pip

# This will install lettuce
sudo pip install lettuce

# This will install scapy
wget http://www.secdev.org/projects/scapy/files/scapy-latest.zip
unzip scapy-latest.zip
# Apply patches, see below
cd scapy-2.2.0
sudo python setup.py install

As of Feb. 2013 scapy is quite outdated. When starting it may produce
warnings similar to:

WARNING: No route found for IPv6 destination :: (no default route?)
/usr/local/lib/python2.6/dist-packages/scapy/crypto/cert.py:10:
DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import os, sys, math, socket, struct, sha, hmac, string, time
/usr/local/lib/python2.6/dist-packages/scapy/crypto/cert.py:11:
DeprecationWarning: The popen2 module is deprecated.  Use the subprocess module.
  import random, popen2, tempfile

Our understanding is that those can be safely ignored for now.

 Scapy patches
---------------
Currently the latest Scapy release seems to be 2.2.0. Its main
developer left the project and there is noone to carry on with it, so
the upstream project seems to be in limbo. We need to sort out the
way we'll deal with fixes in Scapy. For now, we keep the patches in
forge/patches/scapy. The scapy code that needs to be patched is in
scapy-2.2.0/scapy/layers.

Please apply each patch using the following (or similar) command:
patch -p0 < name-of-the-patch

For example, if Forge lives in ~/builds/forge, and the Scapy source 
is in ~/builds/scapy-2.2.0, then you can patch the Scapy file
"dhcp6.py" with patches 1 and 2 by performing the following:
cd ~/scapy-2.2.0/scapy/layers
patch dhcp6.py <~/builds/forge/patches/scapy/scapy-2.2.0-dhcp6.patch1
patch dhcp6.py <~/builds/forge/patches/scapy/scapy-2.2.0-dhcp6.patch2

 Configuration
---------------
Configuration management is not well designed yet. The default configuration
is stored in the features/init_all.py_default. Please copy this file to
features/init_all.py and edit relevant values in this file. It contains
comments for each value so the configuration is not described here in detail.

 Usage
-------
cd forge/lettuce

The following command should be executed as root because these tests require
opening of prvileged ports (DHCP client port):

python run_test.py -6 -t v6

The command above will execute the all existing DHCPv6 tests (as all of them
are tagged "v6"). It is possible to run selected tests only, using appropriate
tags which can be found in the test scenarios.

This is an example of running test:
Feature: DHCPv6 options                                                              # features/v6.options.feature:3
  This is a simple DHCPv6 options validation. Its purpose is to check if             # features/v6.options.feature:4
  requested options are assigned properly.                                           # features/v6.options.feature:5

  Scenario: v6.options.dns-servers                                                   # features/v6.options.feature:7
    Test Setup:                                                                      # features/misc.py:30
    Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.           # features/srv_control.py:127
    Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.           # features/srv_control.py:127
    Server is configured with dns-servers option with value 2001:db8::1,2001:db8::2. # features/srv_control.py:139
    Server is started.                                                               # features/srv_control.py:155
Automatic start for Kea is not implemented yet. Please start Kea
manually and run the following config (also stored in kea.conf):
------
# subnet defintion Kea 6
config add Dhcp6/subnet6
config set Dhcp6/subnet6[0]/subnet "3000::/64"
config set Dhcp6/subnet6[0]/pool [ "3000::1-3000::ff" ]
config commit
config add Dhcp6/option-data
config set Dhcp6/option-data[0]/name "dns-servers"
config set Dhcp6/option-data[0]/code 23
config set Dhcp6/option-data[0]/space "dhcp6"
config set Dhcp6/option-data[0]/csv-format true
config set Dhcp6/option-data[0]/data "2001:db8::1,2001:db8::2"
config commit

------
    Server is started.                                                               # features/srv_control.py:155
    Test Procedure:                                                                  # features/misc.py:35
    Client requests option 23.                                                       # features/msg6.py:33
    Client sends SOLICIT message and expect ADVERTISE response.                      # features/msg6.py:43
    Client sends SOLICIT message and expect ADVERTISE response.                      # features/msg6.py:43
    Pass Criteria:                                                                   # features/misc.py:25
    Server MUST respond with advertise message.                                      # features/msg6.py:88
Begin emission:
Finished to send 1 packets.

Received 2 packets, got 1 answers, remaining 0 packets
    Server MUST respond with advertise message.                                      # features/msg6.py:88
    Response MUST include option 23.                                                 # features/msg6.py:112
    Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.               # features/msg6.py:123
    Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.               # features/msg6.py:123
    References: v6.options                                                           # features/references.py:25
    Tags: v6 options dns-servers automated                                           # features/references.py:30

1 feature (1 passed)
1 scenario (1 passed)
13 steps (13 passed)
(finished within 3 seconds)
root@debian64:/home/thomson/devel/dhcp-val/scripts/lettuce#

 Writing new tests
-------------------

Please edit existing *.feature file or create a new one. For example,
see dhcp-val/scripts/lettuce/v6.options.feature. This is sample
content:

# Author: Tomasz Mrugalski

Feature: DHCPv6 options
    This is a simple DHCPv6 options validation. Its purpose is to check if
    requested options are assigned properly.

    Scenario: v6.options.dns-servers
    	# Checks that server is able to serve dns-servers option to clients.

    	Test Setup:
        Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.
        Server is configured with dns-servers option with value 2001:db8::1,2001:db8::2.
        Server is started.

	Test Procedure:
	Client requests option 23.
	Client sends SOLICIT message and expect ADVERTISE response.

	Pass Criteria:
	Server MUST respond with advertise message.
	Response MUST include option 23.
	Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.

	References: v6.options

	Tags: v6 options dns-servers automated

That text is interpreted line by line and each command is
executed. For each of those steps, there is undelying python function
that understands the text. Here is example implementation of the
"Server is configured with X subnet with Y pool." Those functions are
stored in various .py files in features/ dir.

@step('Server is configured with (\S+) subnet with (\S+) pool.')
def prepare_cfg_kea6_subnet(step, subnet, pool):
    if (subnet == "default"):
        subnet = "2001:db8:1::/64"
    if (pool == "default"):
        pool = "2001:db8:1::0 - 2001:db8:1::ffff"
    world.cfg["conf"] = world.cfg["conf"] + \
    "# subnet defintion Kea 6\n" + \
    "config add Dhcp6/subnet6\n" + \
    "config set Dhcp6/subnet6[0]/subnet \"" + subnet + "\"\n" + \
    "config set Dhcp6/subnet6[0]/pool [ \"" + pool + "\" ]\n" +\
    "config commit\n"

 Additional info
-----------------
http://lettuce.it - Lettuce homepage
http://www.secdev.org/projects/scapy/ - Scapy homepage
