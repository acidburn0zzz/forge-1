
  Forge info
 ------------

Forge is a temporary name for our automated DHCP validation framework.
It uses Scapy and Lettuce to run various DHCP tests. It is in very
early stages of development (think "pre-prototype").


 Dependencies Installation
---------------------------

Forge requires python 2.x, scapy and lettuce. The following steps are
necessary on Debian 6.0. If you use different operating system, your
steps may be slightly different:

# This will install pip (python package installer)
sudo apt-get install python-pip

# This will install lettuce
sudo pip install lettuce

# This will install scapy
wget scapy.net
mv index.html scapy-latest.zip
unzip scapy.zip
cd scapy-2.2.0
python setup.py install

 Configuration
---------------
Configuration management is not well designed yet. Currently it is
stored in features/terrain.py. There are couple constants that should
be modified:

SERVER_TYPE - designates tested server type, e.g. kea4 or kea6
IFACE - name of the interface the test machine should use to reach the
        server. Expected responses are received over that interface.

 Usage
-------
cd dhcp-val/scripts/lettuce
lettuce

This is an example of running test:
Feature: DHCPv6 options                                                              # features/v6.options.feature:3
  This is a simple DHCPv6 options validation. Its purpose is to check if             # features/v6.options.feature:4
  requested options are assigned properly.                                           # features/v6.options.feature:5

  Scenario: v6.options.dns-servers                                                   # features/v6.options.feature:7
    Test Setup:                                                                      # features/misc.py:30
    Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.           # features/srv_control.py:127
    Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.           # features/srv_control.py:127
    Server is configured with dns-servers option with value 2001:db8::1,2001:db8::2. # features/srv_control.py:139
    Server is started.                                                               # features/srv_control.py:155
Automatic start for Kea is not implemented yet. Please start Kea
manually and run the following config (also stored in kea.conf):
------
# subnet defintion Kea 6
config add Dhcp6/subnet6
config set Dhcp6/subnet6[0]/subnet "3000::/64"
config set Dhcp6/subnet6[0]/pool [ "3000::1-3000::ff" ]
config commit
config add Dhcp6/option-data
config set Dhcp6/option-data[0]/name "dns-servers"
config set Dhcp6/option-data[0]/code 23
config set Dhcp6/option-data[0]/space "dhcp6"
config set Dhcp6/option-data[0]/csv-format true
config set Dhcp6/option-data[0]/data "2001:db8::1,2001:db8::2"
config commit

------
    Server is started.                                                               # features/srv_control.py:155
    Test Procedure:                                                                  # features/misc.py:35
    Client requests option 23.                                                       # features/msg6.py:33
    Client sends SOLICIT message and expect ADVERTISE response.                      # features/msg6.py:43
    Client sends SOLICIT message and expect ADVERTISE response.                      # features/msg6.py:43
    Pass Criteria:                                                                   # features/misc.py:25
    Server MUST respond with advertise message.                                      # features/msg6.py:88
Begin emission:
Finished to send 1 packets.

Received 2 packets, got 1 answers, remaining 0 packets
    Server MUST respond with advertise message.                                      # features/msg6.py:88
    Response MUST include option 23.                                                 # features/msg6.py:112
    Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.               # features/msg6.py:123
    Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.               # features/msg6.py:123
    References: v6.options                                                           # features/references.py:25
    Tags: v6 options dns-servers automated                                           # features/references.py:30

1 feature (1 passed)
1 scenario (1 passed)
13 steps (13 passed)
(finished within 3 seconds)
root@debian64:/home/thomson/devel/dhcp-val/scripts/lettuce# 

 Writing new tests
-------------------

Please edit existing *.feature file or create a new one. For example,
see dhcp-val/scripts/lettuce/v6.options.feature. This is sample
content:

# Author: Tomasz Mrugalski

Feature: DHCPv6 options
    This is a simple DHCPv6 options validation. Its purpose is to check if
    requested options are assigned properly.
    
    Scenario: v6.options.dns-servers
    	# Checks that server is able to serve dns-servers option to clients.

    	Test Setup:
        Server is configured with 3000::/64 subnet with 3000::1-3000::ff pool.
        Server is configured with dns-servers option with value 2001:db8::1,2001:db8::2.
        Server is started.

	Test Procedure:
	Client requests option 23.
	Client sends SOLICIT message and expect ADVERTISE response.

	Pass Criteria:
	Server MUST respond with advertise message.
	Response MUST include option 23.
	Response option 23 MUST contain addresses 2001:db8::1,2001:db8::2.

	References: v6.options 

	Tags: v6 options dns-servers automated

That text is interpreted line by line and each command is
executed. For each of those steps, there is undelying python function
that understands the text. Here is example implementation of the
"Server is configured with X subnet with Y pool." Those functions are
stored in various .py files in features/ dir.

@step('Server is configured with (\S+) subnet with (\S+) pool.')
def prepare_cfg_kea6_subnet(step, subnet, pool):
    if (subnet == "default"):
        subnet = "2001:db8:1::/64"
    if (pool == "default"):
        pool = "2001:db8:1::0 - 2001:db8:1::ffff"
    world.cfg["conf"] = world.cfg["conf"] + \
    "# subnet defintion Kea 6\n" + \
    "config add Dhcp6/subnet6\n" + \
    "config set Dhcp6/subnet6[0]/subnet \"" + subnet + "\"\n" + \
    "config set Dhcp6/subnet6[0]/pool [ \"" + pool + "\" ]\n" +\
    "config commit\n"

 Additional info
-----------------
http://lettuce.it - Lettuce homepage
http://www.secdev.org/projects/scapy/ - Scapy homepage
