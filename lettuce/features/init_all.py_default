#Configuration file, please copy this to the init_all.py and fill it with your
#variables. init_all.py is added to gitignore.

# All configurations are separated to different sections:
# general - for general Forge configuration ;)
# ssh - for ssh connection between virtual machines
# kea - for kea configuration
# ISC-DHCP - for ISC-DHCP configurations

# DO NOT CHANGE THAT UNTIL YOU ADD SUPPORT FOR ANOTHER SOFTWARE
# then place it's name in DNS or DHCP list.
DNS = "bind9_server",
DHCP = "dibbler_server", "dibbler_client", "isc_dhcp4_server", "isc_dhcp6_server",\
       "kea4_server", "kea4_server_bind", "kea6_server", "kea6_server_bind"


# =======================================
# =============== GENERAL ===============
# This defines the logging level for the common logger used by this framework
# Possible values are CRITICAL, ERROR, WARNING, INFO and DEBUG and they are
# case insensitive.
LOGLEVEL = "info"

# Controls whether packet contents are shown on stdout.  Choices are:
# client - shows DHCP requests sent from the test client
# server -  shows DHCP responses received from the server under test
# both - shows DHCP packets from both test client and server under test
SHOW_PACKETS_FROM = ""

# This defines which software will be tested.
# Allowed values:
# dibbler_client, dibbler_server, kea6_server, kea4_server, isc_dhcp4_server, isc_dhcp6_server,
# kea4_server_bind, kea6_server_bind, bind9_server
# Not all of those are functional yet. This is essentially
# name of the subdirectory in lettuce/features/softwaresupport
# This is list of software under test, you can test server or client (not both!) at the same time,
# also you can use only one DHCP and one DNS server and must end with coma ","
# in e.g.:
# SOFTWARE_UNDER_TEST = "kea6_server","bind9_server",

SOFTWARE_UNDER_TEST = "",

# INCORRECT COMBINATIONS: SOFTWARE_UNDER_TEST = "kea6_server","kea4_server"
# or SOFTWARE_UNDER_TEST = "kea6_server","dibbler_client"

# This defines protocol family. Currently two are
# supported: v4 (which means DHCPv4) and v6 (which means DHCPv6)
PROTO = ""

# Parameters specific to DHCPv4 tests
SRV4_ADDR = ""

# This specifies relay agent address. Leave this as 0.0.0.0 if you don't want
# to test relayed traffic.
REL4_ADDR = "0.0.0.0"

# This is a value client will set giaddr field to. Leave it as 0.0.0.0 if you
# don't want to test relays
GIADDR4 = "0.0.0.0"

# Defines name of the DUT-facing network interface
IFACE = ""

# Defines port numbers for each DHCP version, default values are:
# dhcp v4 source = 68
# dhcp v4 destination = 67
# dhcp v6 source = 546
# dhcp v6 destination = 547

DHCP4_PORT_S = 68  # source port
DHCP4_PORT_D = 67  # destination port

DHCP6_PORT_S = 546  # source port
DHCP6_PORT_D = 547  # destination port

# defines client MAC (used for DUID generation)
CLI_MAC = "00:02:03:04:05:06"

# Because Scapy have problems with reading IPv6 link local addresses on some OS,
# to be sure that your packet don't get dropped fill CLI_LINK_LOCAL with link local
# IPv6 address (it is from pool fe80::/64) assigned to interface you choose in IFACE
CLI_LINK_LOCAL = ""

# For all servers, choose ethernet interface on which server will be configured
# to listen and respond.
SERVER_IFACE = ""

# Specifies path to the server installation directory on DUT. This must
# point to root directory of server installation and must end with /.
SOFTWARE_INSTALL_DIR = "/usr/local/"

# When waiting for output data of a running process, use OUTPUT_WAIT_INTERVAL
# as the interval in which to check again if it has not been found yet.
# If we have waited OUTPUT_WAIT_MAX_INTERVALS times, we will abort with an
# error (so as not to hang indefinitely). Values are counted in seconds.
OUTPUT_WAIT_INTERVAL = 3
OUTPUT_WAIT_MAX_INTERVALS = 5

# When Forge sends a packet, it typically awaits for the server to respond.
# Server typically does that promptly, but during debugging it is benefical for
# the the test to wait a long time. If test concludes too early, it will remove
# the configuration and kill the server (while the debugging still taking place)
PACKET_WAIT_INTERVAL = 1

# scope link server address for testing unicast messages
# Address 3000:: is strongly recommended for global address. Most tests are using pool
# 3000::1-3000::ffff in this case recommended address will not cover any address form
# server pool (what could cause some tests to fail)
SRV_IPV6_ADDR_GLOBAL = ""
SRV_IPV6_ADDR_LINK_LOCAL = ""

# If you wont to build tests history in history.html set HISTORY on True if not,
# on False but for more detailed information about tests, use --with_xunit option
# when starting run_test.py
HISTORY = False

# Save log file in tests result folder
SAVE_LOGS = False

# Save leases file in tests result folder
SAVE_LEASES = False

# Also you can save separate .pcap file of every test. In default it's disabled
# If you recieve error tcpdump: <file name>: Permission denied
# please use command as a root: aa-complain /usr/sbin/tcpdump
TCPDUMP = False

# If your tcpdump is installed in different location place that in TCPDUMP_INSTALL_DIR
# otherwise leave it blank
TCPDUMP_PATH = ""

# Also we can decide to keep main configuration file in tests_results.
SAVE_CONFIG_FILE = False

# Auto archive it's feature that automatically create tar archive containing
# folder 'tests_results' and history.html (if created). Default disabled.
AUTO_ARCHIVE = False

# SLEEP_TIME 1 and 2 are times Forge waiting after performing commands on remote DUT.
# for slower devices it's recommended to set sleep time for longer then couple 1-2 seconds
SLEEP_TIME_1 = 2  # wait after starting remote server
SLEEP_TIME_2 = 2  # wait after all others commands

# EMPTY value is introduced for cases when in test you want configure (or send)
# specific variable without any value.
EMPTY = ""

# =============== DATABASE BACKENDS ===============
# If server is capable to use different database backends, fill this section

# Backend type:
DB_TYPE = ""

# Data base name:
DB_NAME = ""

# User name for databased named DB_NAME
DB_USER = ""

# Password for user DB_USER:
DB_PASSWD = ""

# Host address where is our data base, most likely it will be 'localhost'
DB_HOST = "localhost"


# =============== SSH ===============
# This are required management information about device under test (the one that
# tested server will be running on) root privileges are required! So edit sudoers
# file, or use root account.
# ip address and port. ssh port default 22
MGMT_ADDRESS = ""
MGMT_USERNAME = ""
MGMT_PASSWORD = ""

# =============== Kea ===============
# === For Bundy configuration backend ===
# Also we can decide which logging type choose, logging lvl,
# and BIND10 module type
# for more accurate information please read BIND10 Guide, Chapter 21. Logging

# Allowed values for BINDX: FATAL, ERROR, WARN, INFO, DEBUG.
BIND_LOG_TYPE = "INFO"

# Log level applies to debuglevel in BINDX. Allowed values: 0...99
BIND_LOG_LVL = 0

# This corresponds to Logging/loggers[X]/name field. Leave this as "*" if you
# want every BIND module to log something.
BIND_MODULE = ""


# =============== ISC-DHCP ================
# ISC_DHCP dhcpd uses syslog (rsyslog). In order to capture logging
# you will need to modify /etc/syslog.conf (/etc/rsyslog.conf) to
# contain a line as follows:
#
#     <ISC_DHCP_LOG_FACILITY>.*        <ISC_DHCP_LOG_FILE_NAME>
#
# Example
#
#    local7.*      /varlog/forge_dhcpd.log
#
ISC_DHCP_LOG_FACILITY = "local7"
ISC_DHCP_LOG_FILE = "/var/log/forge_dhcpd.log"


# =============== DNS ===============
# When DNS protocol used to testing.

# Interface on which we are sending DNS queries
DNS_IFACE = ""

# DNS server address:
DNS_ADDR = ""

# DNS port number, default value is 53
DNS_PORT = 53

# Absolute path to server installation:
DNS_SERVER_INSTALL_PATH = ""

# Additional path for server management:
DNS_DATA_PATH = ""

EMPTY = ""
NONE = None
SOFTWARE_INSTALL_DIR = SOFTWARE_INSTALL_PATH

import os
LOGLEVEL = os.getenv('LOGLEVEL', LOGLEVEL)
PROTO = os.getenv('PROTO', PROTO)
SOFTWARE_UNDER_TEST = os.getenv('SOFTWARE_UNDER_TEST', SOFTWARE_UNDER_TEST)
DB_TYPE = os.getenv('DB_TYPE', DB_TYPE)
SOFTWARE_INSTALL_PATH = os.getenv('SOFTWARE_INSTALL_DIR', SOFTWARE_INSTALL_PATH)
SHOW_PACKETS_FROM = os.getenv('SHOW_PACKETS_FROM', SHOW_PACKETS_FROM)
SRV4_ADDR = os.getenv('SRV4_ADDR', SRV4_ADDR)
REL4_ADDR = os.getenv('REL4_ADDR', REL4_ADDR)
GIADDR4 = os.getenv('GIADDR4', GIADDR4)
IFACE = os.getenv('IFACE', IFACE)
CLI_LINK_LOCAL = os.getenv('CLI_LINK_LOCAL', CLI_LINK_LOCAL)
SERVER_IFACE = os.getenv('SERVER_IFACE', SERVER_IFACE)
OUTPUT_WAIT_INTERVAL = os.getenv('OUTPUT_WAIT_INTERVAL', OUTPUT_WAIT_INTERVAL)
OUTPUT_WAIT_MAX_INTERVALS = os.getenv('OUTPUT_WAIT_MAX_INTERVALS', OUTPUT_WAIT_MAX_INTERVALS)
PACKET_WAIT_INTERVAL = os.getenv('PACKET_WAIT_INTERVAL', PACKET_WAIT_INTERVAL)
SRV_IPV6_ADDR_GLOBAL = os.getenv('SRV_IPV6_ADDR_GLOBAL', SRV_IPV6_ADDR_GLOBAL)
SRV_IPV6_ADDR_LINK_LOCAL = os.getenv('SRV_IPV6_ADDR_LINK_LOCAL', SRV_IPV6_ADDR_LINK_LOCAL)
HISTORY = os.getenv('HISTORY', HISTORY)
TCPDUMP = os.getenv('TCPDUMP', TCPDUMP)
TCPDUMP_PATH = os.getenv('TCPDUMP_INSTALL_DIR', TCPDUMP_PATH)
SAVE_CONFIG_FILE = os.getenv('SAVE_CONFIG_FILE', SAVE_CONFIG_FILE)
AUTO_ARCHIVE = os.getenv('AUTO_ARCHIVE', AUTO_ARCHIVE)
SLEEP_TIME_1 = os.getenv('SLEEP_TIME_1', SLEEP_TIME_1)
SLEEP_TIME_2 = os.getenv('SLEEP_TIME_2', SLEEP_TIME_2)
MGMT_ADDRESS = os.getenv('MGMT_ADDRESS', MGMT_ADDRESS)
MGMT_USERNAME = os.getenv('MGMT_USERNAME', MGMT_USERNAME)
MGMT_PASSWORD = os.getenv('MGMT_PASSWORD', MGMT_PASSWORD)
SAVE_LOGS = os.getenv('SAVE_LOGS', SAVE_LOGS)
BIND_LOG_TYPE = os.getenv('BIND_LOG_TYPE', BIND_LOG_TYPE)
BIND_LOG_LVL = os.getenv('BIND_LOG_LVL', BIND_LOG_LVL)
BIND_MODULE = os.getenv('BIND_MODULE', BIND_MODULE)
SAVE_LEASES = os.getenv('SAVE_LEASES', SAVE_LEASES)
DNS_IFACE = os.getenv('DNS_IFACE', DNS_IFACE)
DNS_ADDR = os.getenv('DNS_ADDR', DNS_ADDR)
DNS_PORT = os.getenv('DNS_PORT', DNS_PORT)
DNS_SERVER_INSTALL_PATH = os.getenv('DNS_SERVER_INSTALL_PATH', DNS_SERVER_INSTALL_PATH)
DNS_DATA_PATH = os.getenv('DNS_DATA_PATH', DNS_DATA_PATH)
ISC_DHCP_LOG_FACILITY = os.getenv('ISC_DHCP_LOG_FACILITY', ISC_DHCP_LOG_FACILITY)
ISC_DHCP_LOG_FILE = os.getenv('ISC_DHCP_LOG_FILE', ISC_DHCP_LOG_FILE)
DB_TYPE = os.getenv('DB_TYPE', DB_TYPE)
DB_NAME = os.getenv('DB_NAME', DB_NAME)
DB_USER = os.getenv('DB_USER', DB_USER)
DB_PASSWD = os.getenv('DB_PASSWD', DB_PASSWD)
DB_HOST = os.getenv('DB_HOST', DB_HOST)


class ForgeConfiguration:
    def __init__(self):
        # default
        self.dns_used = "bind9_server",
        self.dhcp_used = "dibbler_server", "dibbler_client", "isc_dhcp4_server", "isc_dhcp6_server", \
                         "kea4_server", "kea4_server_bind", "kea6_server", "kea6_server_bind", "kea6_mini_server"
        self.empty = "EMPTY"
        self.none = None
        # FORGE
        self.mgmt_address = MGMT_ADDRESS
        self.mgmt_username = MGMT_USERNAME
        self.mgmt_password = MGMT_PASSWORD
        self.loglevel = LOGLEVEL
        self.history = HISTORY
        self.tcpdump = TCPDUMP
        self.tcpdump_path = TCPDUMP_PATH
        self.save_config_file = SAVE_CONFIG_FILE
        self.auto_archive = AUTO_ARCHIVE
        self.sleep_time_1 = SLEEP_TIME_1
        self.sleep_time_2 = SLEEP_TIME_2
        self.show_packets_from = SHOW_PACKETS_FROM
        self.save_leases = SAVE_LEASES
        self.save_logs = SAVE_LOGS
        self.packet_wait_interval = PACKET_WAIT_INTERVAL

        # DHCP
        self.proto = PROTO
        self.software_under_test = SOFTWARE_UNDER_TEST
        self.software_install_path = SOFTWARE_INSTALL_PATH
        # TODO remove trailing / if there is some
        self.software_install_dir = SOFTWARE_INSTALL_PATH # that is cept here to backwards compatibility
        self.db_type = DB_TYPE
        self.db_host = DB_HOST
        self.db_name = DB_NAME
        self.db_passwd = DB_PASSWD
        self.db_user = DB_USER
        self.srv4_addr = SRV4_ADDR
        self.rel4_addr = REL4_ADDR
        self.gia4_addr = GIADDR4
        self.giaddr4 = GIADDR4
        self.iface = IFACE
        self.server_iface = SERVER_IFACE
        self.cli_mac = self.gethwaddr(self.iface)

        # DNS
        self.dns_iface = DNS_IFACE
        self.dns_addr = DNS_ADDR
        self.dns_port = DNS_PORT
        self.dns_data_path = DNS_DATA_PATH
        self.dns_server_install_path = DNS_SERVER_INSTALL_PATH

        # ISC-DHCP specific
        self.isc_dhcp_log_file = ISC_DHCP_LOG_FILE
        self.isc_dhcp_log_facility = ISC_DHCP_LOG_FACILITY

        # NETWORK
        self.srv_ipv6_addr_global = SRV_IPV6_ADDR_GLOBAL
        self.cli_link_local = CLI_LINK_LOCAL

        # used defined variables
        self.user_variables_temp = []

        # basic validation of configuration
        self.basic_validation()

    def gethwaddr(self, ifname):
        import fcntl, socket, struct
        s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
        info = fcntl.ioctl(s.fileno(), 0x8927,  struct.pack('256s', ifname[:15]))
        return ':'.join(['%02x' % ord(char) for char in info[18:24]])

    def basic_validation(self):
        from sys import exit
        if self.proto not in ["v4", "v6"]:
            print "Configuration failure, protocol version not set properly." \
                  " Please use ./forge.py -T to validate configuration."
            exit(-1)
        if self.software_install_path == "":
            print "Configuration failure, software_install_path empty." \
                  " Please use ./forge.py -T to validate configuration."
            exit(-1)
        if self.mgmt_address == "":
            print "Configuration failure, mgmt_address empty. Please use ./forge.py -T to validate configuration."
            exit(-1)

    def set_env_val(self, env_name, env_val):
        """
        Set environmet variable.
        :param env_name:
        :param env_val:
        :return:
        """
        os.putenv(env_name, env_val)

    def set_temporaty_value(self, env_name, env_val):
        """
        Will set temporary value of existing variable for the purpose of one test,
        should be removed in section @after_each
        :return:
        """
        # TODO develop this one
        pass

    def remove_temporary_value(self, env_name):
        """
        Will remove all temporary changed values bringin back previously set values
        Have to be called in terrazin.py @after_each
        :return:
        """
        # TODO develop this one
        pass

    def test_remote_location(self):
        """
        Check if Forge can connect to configured location
        :return:
        """
        from softwaresupport.multi_server_functions import fabric_run_command
        result = fabric_run_command("ls -la")

    def test_addresses(self):
        """
        Ping to all configured addresses
        :return:
        """
        # TODO develop this one
        pass

    def check_remote_path(self):
        """
        Check if somftware under test is indeed installed
        :return:
        """
        from softwaresupport.multi_server_functions import fabric_run_command
        if "kea" in self.software_under_test:
            result = fabric_run_command('(' + self.software_install_path + 'sbin/keactrl status')
        elif "isc_dhcp" in self.software_under_test:
            result = fabric_run_command('ls -la ' + self.software_install_path + 'sbin/dhcpd')
        else:
            result = True

    def test_priviledges(self):
        """
        Test priviledges on remote location
        :return:
        """
        # TODO develop this one
        from softwaresupport.multi_server_functions import fabric_sudo_command
        result = fabric_sudo_command("ls -la")

        pass

    def test_database(self):
        """
        Test if non-memfile database is reachable
        :return:
        """
        # TODO develop this one
        if self.db_type == "memfile":
            print "Checking database ommitted: db_type is memfile"
            return 0
        else:
            print "!TODO"
            return 0


from lettuce import world, before, after
world.f_cfg = ForgeConfiguration()


if __name__ == '__main__':
    f_config = ForgeConfiguration()
    print f_config.__dict__
    f_config.test_addresses()
    f_config.test_remote_location()
    f_config.test_priviledges()
    f_config.test_database()
