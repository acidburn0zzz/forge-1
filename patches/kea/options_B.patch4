--- backup3	2013-08-07 11:44:43.872199568 +0200
+++ dhcp6_srv.cc	2013-08-07 23:17:10.569581519 +0200
@@ -566,8 +566,17 @@
 
 void
 Dhcpv6Srv::sanityCheck(const Pkt6Ptr& pkt, RequirementLevel clientid,
-                       RequirementLevel serverid) {
+                       RequirementLevel serverid,
+                       RequirementLevel IA_NA,
+                       RequirementLevel rapid,
+                       RequirementLevel reconfigure_accept,
+                       RequirementLevel time,
+                       RequirementLevel auth) {
+
+	RequirementLevel relay = FORBIDDEN;
+	RequirementLevel interface_id = FORBIDDEN;
     Option::OptionCollection client_ids = pkt->getOptions(D6O_CLIENTID);
+
     switch (clientid) {
     case MANDATORY:
         if (client_ids.size() != 1) {
@@ -611,6 +620,141 @@
                       << ") server-id options received in " << pkt->getName());
         }
     }
+    
+	Option::OptionCollection Relay_msgs = pkt->getOptions(D6O_RELAY_MSG);
+	switch (relay) {
+	case FORBIDDEN:
+		if (!Relay_msgs.empty()) {
+			isc_throw(RFCViolation, "Relay_msg option was not expected, but "
+					  << Relay_msgs.size() << " received in " << pkt->getName());
+			}
+		break;
+
+	case MANDATORY:
+		// never mandatory or optional in received messages, only relay-forward/reply
+		break;
+
+	case OPTIONAL:
+		// never mandatory or optional in received messages, only relay-forward/reply
+		break;
+	}
+
+	Option::OptionCollection interface_ids = pkt->getOptions(D6O_INTERFACE_ID);
+	switch (interface_id) {
+	case FORBIDDEN:
+		if (!interface_ids.empty()) {
+			isc_throw(RFCViolation, "Interface ID option was not expected, but "
+					  << interface_ids.size() << " received in " << pkt->getName());
+			}
+		break;
+
+	case MANDATORY:
+		// never mandatory or optional in received messages, only relay-forward/reply
+		break;
+
+	case OPTIONAL:
+		// never mandatory or optional in received messages, only relay-forward/reply
+		break;
+	}
+	
+	Option::OptionCollection IA_NAs = pkt->getOptions(D6O_IA_NA);
+	switch (IA_NA) {
+	case FORBIDDEN:
+		if (!IA_NAs.empty()) {
+			isc_throw(RFCViolation, "IA-NA option was not expected, but "
+					  << IA_NAs.size() << " received in " << pkt->getName());
+			}
+		break;
+
+	case MANDATORY:
+		if (IA_NAs.empty()) {
+			isc_throw(RFCViolation, "Invalid number of IA-NA options received ("
+					  << IA_NAs.size() << "), at least 1 expected in message "
+					  << pkt->getName());
+		}
+		break;
+
+	case OPTIONAL:
+		//if it's optional there can be zero, one or more than one
+		break;
+	}
+    
+	Option::OptionCollection Rapids = pkt->getOptions(D6O_RAPID_COMMIT);
+	switch (rapid) {
+	case FORBIDDEN:
+		if (!Rapids.empty()) {
+			isc_throw(RFCViolation, "Rapid-Commit option was not expected, but "
+					  << Relay_msgs.size() << " received in " << pkt->getName());
+		}
+		break;
+	case MANDATORY:
+		// never mandatory in received messages
+		break;
+	case OPTIONAL:
+		if (Rapids.size() > 1) {
+			isc_throw(RFCViolation, "Too many (" << Rapids.size()
+					  << ") rapid-commit options received in " << pkt->getName());
+		}
+		break;
+	}
+	
+	Option::OptionCollection Reconfigure_accepts = pkt->getOptions(D6O_RECONF_ACCEPT);
+	switch (reconfigure_accept) {
+	case FORBIDDEN:
+		if (!Reconfigure_accepts.empty()) {
+			isc_throw(RFCViolation, "Recofigure accept option was not expected, but "
+					  << Reconfigure_accepts.size() << " received in " << pkt->getName());
+		}
+		break;
+
+	case MANDATORY:
+		// never mandatory in received messages
+		break;
+
+	case OPTIONAL:
+		if (Reconfigure_accepts.size() > 1) {
+			isc_throw(RFCViolation, "Too many (" << Reconfigure_accepts.size()
+					  << ") Reconfigure_accept options received in " << pkt->getName());
+		}
+	}
+    
+    
+	Option::OptionCollection times = pkt->getOptions(D6O_ELAPSED_TIME);
+	switch (time) {
+	case FORBIDDEN:
+		if (!times.empty()) {
+			isc_throw(RFCViolation, "Elapsed Time option was not expected, but "
+					  << times.size() << " received in " << pkt->getName());
+		}
+		break;
+
+	case MANDATORY:
+		// never mandatory in received messages
+		break;
+
+	case OPTIONAL:
+		if (times.size() > 1) {
+			isc_throw(RFCViolation, "Too many (" << times.size()
+					  << ") Elapsed Time options received in " << pkt->getName());
+		}
+	}
+
+	Option::OptionCollection authentication = pkt->getOptions(D6O_AUTH);
+	switch (auth) {
+	case FORBIDDEN:
+		// never forbidden or mandatory in received messages		
+		break;
+
+	case MANDATORY:
+		// never forbidden or mandatory in received messages
+		break;
+
+	case OPTIONAL:
+		if (authentication.size() > 1) {
+			isc_throw(RFCViolation, "Too many (" << authentication.size()
+					  << ") Authentication options received in " << pkt->getName());
+		}
+	}
 }
 
 Subnet6Ptr
@@ -1138,7 +1282,7 @@
 Pkt6Ptr
 Dhcpv6Srv::processSolicit(const Pkt6Ptr& solicit) {
 
-    sanityCheck(solicit, MANDATORY, FORBIDDEN);
+    sanityCheck(solicit, MANDATORY, FORBIDDEN, OPTIONAL, OPTIONAL, OPTIONAL, OPTIONAL, OPTIONAL);
 
     Pkt6Ptr advertise(new Pkt6(DHCPV6_ADVERTISE, solicit->getTransid()));
 
@@ -1154,7 +1298,7 @@
 Pkt6Ptr
 Dhcpv6Srv::processRequest(const Pkt6Ptr& request) {
 
-    sanityCheck(request, MANDATORY, MANDATORY);
+    sanityCheck(request, MANDATORY, MANDATORY, OPTIONAL, FORBIDDEN, OPTIONAL, OPTIONAL, OPTIONAL);
 
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, request->getTransid()));
 
@@ -1170,7 +1314,7 @@
 Pkt6Ptr
 Dhcpv6Srv::processRenew(const Pkt6Ptr& renew) {
 
-    sanityCheck(renew, MANDATORY, MANDATORY);
+    sanityCheck(renew, MANDATORY, MANDATORY, OPTIONAL, FORBIDDEN, OPTIONAL, OPTIONAL, OPTIONAL);
 
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, renew->getTransid()));
 
@@ -1185,6 +1329,9 @@
 
 Pkt6Ptr
 Dhcpv6Srv::processRebind(const Pkt6Ptr& rebind) {
+	
+    sanityCheck(renew, MANDATORY, FORBIDDEN, OPTIONAL, FORBIDDEN, FORBIDDEN, OPTIONAL, OPTIONAL);
+    
     /// @todo: Implement this
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, rebind->getTransid()));
     return reply;
@@ -1192,7 +1339,10 @@
 
 Pkt6Ptr
 Dhcpv6Srv::processConfirm(const Pkt6Ptr& confirm) {
-    /// @todo: Implement this
+
+    sanityCheck(confirm, MANDATORY, FORBIDDEN, OPTIONAL, FORBIDDEN, FORBIDDEN, OPTIONAL, OPTIONAL);
+	
+	/// @todo: Implement this
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, confirm->getTransid()));
     return reply;
 }
@@ -1200,7 +1350,7 @@
 Pkt6Ptr
 Dhcpv6Srv::processRelease(const Pkt6Ptr& release) {
 
-    sanityCheck(release, MANDATORY, MANDATORY);
+    sanityCheck(release, MANDATORY, MANDATORY, OPTIONAL, FORBIDDEN, FORBIDDEN, OPTIONAL, OPTIONAL);
 
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, release->getTransid()));
 
@@ -1214,7 +1364,10 @@
 
 Pkt6Ptr
 Dhcpv6Srv::processDecline(const Pkt6Ptr& decline) {
-    /// @todo: Implement this
+
+    sanityCheck(decline, MANDATORY, MANDATORY, OPTIONAL, FORBIDDEN, FORBIDDEN, OPTIONAL, OPTIONAL);
+    
+	/// @todo: Implement this
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, decline->getTransid()));
     return reply;
 }
@@ -1222,7 +1375,7 @@
 Pkt6Ptr
 Dhcpv6Srv::processInfRequest(const Pkt6Ptr& infRequest) {
 
-    sanityCheck(infRequest, OPTIONAL, OPTIONAL);
+    sanityCheck(infRequest, OPTIONAL, OPTIONAL, FORBIDDEN, FORBIDDEN, OPTIONAL, OPTIONAL, OPTIONAL);
 
     Pkt6Ptr reply(new Pkt6(DHCPV6_REPLY, infRequest->getTransid()));
 
